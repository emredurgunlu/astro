---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import {
	LANGUAGES,
	pathNameIsInLanguage,
	DEFAULT_LANG,
	getLocalizedPathname,
	type UiType,
  useTranslations,
} from "../i18n/utils";
import JsonLD from "./JsonLD.astro";
import "../styles/global.css";

interface Props {
  title: string;
  description: string;
  image?: string;
  lang: string;
  isArticle?: boolean;
  pubDate?: Date;
  updatedDate?: Date;
}

const canonicalPathname = pathNameIsInLanguage(Astro.url.pathname, DEFAULT_LANG)
	? Astro.url.pathname
	: getLocalizedPathname(Astro.url.pathname, DEFAULT_LANG);
const canonicalURL = new URL(canonicalPathname, Astro.site);

const {
	lang,
	title,
	description,
	image = "/blog-placeholder-1.jpg",
  isArticle = false,
  pubDate,
  updatedDate,
} = Astro.props;

const alternateLang = Object.keys(LANGUAGES) as UiType[];;
const alternateLinks = alternateLang.map((_lang: UiType) => {
  return {
    href: new URL(getLocalizedPathname(Astro.url.pathname, _lang), Astro.site),
    hreflang: _lang,
  };
});
const t = useTranslations(lang as UiType);
const siteName = t.site.title;
const logoUrl = new URL('/favicon.svg', Astro.site);
const orgSchema = {
  "@context": "https://schema.org",
  "@type": "Organization",
  name: siteName,
  url: String(Astro.site),
  logo: String(logoUrl),
  sameAs: [
    "https://twitter.com/astrodotbuild",
    "https://youtube.com",
    "https://facebook.com",
  ],
};
const webSchema = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  name: siteName,
  url: String(Astro.site),
  inLanguage: lang,
};
---

<!-- Global Metadata -->
<script is:inline>
  try {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
      document.documentElement.setAttribute('data-theme', savedTheme);
    }
  } catch {}
</script>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

{import.meta.env.PUBLIC_GOOGLE_SITE_VERIFICATION && (
  <meta name="google-site-verification" content={import.meta.env.PUBLIC_GOOGLE_SITE_VERIFICATION} />
)}

{import.meta.env.PUBLIC_GA_ID && (
  <>
    <script type="text/partytown" src={`https://www.googletagmanager.com/gtag/js?id=${import.meta.env.PUBLIC_GA_ID}`}></script>
    <script type="text/partytown">
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);} 
      gtag('js', new Date());
      // GA kimliğini build sırasında HTML'e gömerek import.meta kullanımını kaldırıyoruz
      gtag('config', "{import.meta.env.PUBLIC_GA_ID}", { anonymize_ip: true });
    </script>
  </>
)}

<link rel="sitemap" href="/sitemap-index.xml" />

<!-- Font preloads example -->
<!-- <link
	rel="preload"
	href="/fonts/atkinson-regular.woff"
	as="font"
	type="font/woff"
	crossorigin
/>
<link
	rel="preload"
	href="/fonts/atkinson-bold.woff"
	as="font"
	type="font/woff"
	crossorigin
/> -->

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Alternate URLs -->
{
	alternateLinks.map(({ href, hreflang }) => (
		<link rel="alternate" href={href} hreflang={hreflang} />
	))
}

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={isArticle ? 'article' : 'website'} />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />
{
  isArticle && (
    <>
      {pubDate && <meta property="article:published_time" content={pubDate.toISOString()} />}
      {updatedDate && <meta property="article:modified_time" content={updatedDate.toISOString()} />}
      <meta property="og:site_name" content={siteName} />
    </>
  )
}

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- Structured Data: Organization & WebSite -->
<JsonLD schema={orgSchema} />
<JsonLD schema={webSchema} />
